{"version":3,"file":"static/js/589.2117b4f5.chunk.js","mappings":"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","sources":["schemas/registerSchemas.js","webpack://protask_techteam/./src/components/RegisterForm/registerForm.module.css?0fd0","components/RegisterForm/RegisterForm.jsx","schemas/loginSchemas.js","webpack://protask_techteam/./src/components/LoginForm/loginForm.module.css?9d59","components/LoginForm/LoginForm.jsx","pages/AuthPage/authPage.module.css","pages/AuthPage/AuthPage.jsx"],"sourcesContent":["import { string, object, } from \"yup\";\n\nexport const registerSchema = object().shape({\n    name: string().required(\"This field is required\"),\n    email: string().email(\"Invalid email\").required(\"This field is required\"),\n    password: string().required(\"This field is required\"),\n});","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"registerForm_wrap__HOmjm\",\"formWrapper\":\"registerForm_formWrapper__DJ0BS\",\"contentWrapper\":\"registerForm_contentWrapper__MZ7JG\",\"switcher\":\"registerForm_switcher__zgKGw\",\"inputContainer\":\"registerForm_inputContainer__TEBcW\",\"input\":\"registerForm_input__uBoqp\",\"button\":\"registerForm_button__RUMnu\",\"error\":\"registerForm_error__asv0c\",\"registerButton\":\"registerForm_registerButton__1kpra\",\"passwordContainer\":\"registerForm_passwordContainer__0BSzz\",\"passwordInput\":\"registerForm_passwordInput__4rHgi\",\"showPasswordButtonWrap\":\"registerForm_showPasswordButtonWrap__Lk2vT\",\"showPasswordInput\":\"registerForm_showPasswordInput__JIBF0\",\"showPasswordButton\":\"registerForm_showPasswordButton__avuPs\"};","\nimport { useState, useId } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { registerSchema } from \"schemas/registerSchemas\";\n\n//import LoginForm from \"components/LoginForm/LoginForm\";\n\nimport styles from \"./registerForm.module.css\"\nimport { NavLink, useLocation } from \"react-router-dom\";\n\n\nconst RegisterForm = ({onSubmit}) => {\n    const { pathname } = useLocation();\n    const isRegisterForm = pathname === \"/auth/register\"\n\n    const emailId = useId();\n    const passwordId = useId();\n    const nameId = useId();\n\n    const { register, handleSubmit, formState: { errors },  } = useForm({\n        resolver: yupResolver(registerSchema)\n      });\n// trigger\n    const [showPassword, setShowPassword] = useState(false);\n\n    const togglePasswordVisibility = () => {\n        setShowPassword(!showPassword);\n      };\n\n      // const submitForm = async (data) => {\n      //   await trigger();\n      //   onSubmit(data);\n      // };\n\n      return (\n        <div className={styles.wrap}>\n          <form onSubmit={handleSubmit(onSubmit)} className={styles.formWrapper} noValidate>\n            <div className={styles.contentWrapper}>\n              <div className={styles.switcher}>\n                <button className={styles.button} disabled={isRegisterForm}>Registration</button>\n                <NavLink to=\"/auth/login\">\n                  <button className={styles.button} disabled={!isRegisterForm}>Log In</button>\n                </NavLink>\n              </div>\n              <div className={styles.inputContainer}>\n                <input\n                  placeholder=\"Enter your name\"\n                  className={styles.input}\n                  id={nameId}\n                  {...register(\"name\")}\n                  name=\"name\"\n                  required\n                />\n                {errors.name && <p className={styles.error}>{errors.name.message}</p>}\n                <input\n                  placeholder=\"Enter your email\"\n                  className={styles.input}\n                  id={emailId}\n                  {...register(\"email\")}\n                  type=\"email\"\n                  name=\"email\"\n                  required\n                />\n                {errors.email && <p className={styles.error}>{errors.email.message}</p>}\n                <div className={styles.passwordContainer}>\n                  <input\n                    placeholder=\"Create a password\"\n                    className={styles.passwordInput}\n                    id={passwordId}\n                    {...register(\"password\")}\n                    type={showPassword ? \"text\" : \"password\"}\n                    name=\"password\"\n                    required\n                  />\n                    <div className={styles.showPasswordButtonWrap}>\n                        <div\n                        className={styles.showPasswordButton}\n                        onClick={togglePasswordVisibility}\n                        >\n                            <svg className={styles.logoIconOuter} width=\"18\" height=\"14\" viewBox=\"0 0 18 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path d=\"M0.75 7C0.75 7 3.75 1 9 1C14.25 1 17.25 7 17.25 7C17.25 7 14.25 13 9 13C3.75 13 0.75 7 0.75 7Z\" stroke=\"white\" strokeWidth=\"1.3\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                <svg className={styles.logoIconInner} width=\"6\" height=\"6\" viewBox=\"0 0 6 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path d=\"M3 5.25C4.24264 5.25 5.25 4.24264 5.25 3C5.25 1.75736 4.24264 0.75 3 0.75C1.75736 0.75 0.75 1.75736 0.75 3C0.75 4.24264 1.75736 5.25 3 5.25Z\" stroke=\"white\" strokeWidth=\"1.3\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                </svg>\n                            </svg>\n                            </div>\n                    </div>\n                </div>\n                {errors.password && <p className={styles.error}>{errors.password.message}</p>}\n                <button className={styles.registerButton} type=\"submit\">Register Now</button>\n              </div>\n            </div>\n          </form>\n        </div>\n      );\n    }\n\nexport default RegisterForm;\n\n","import { string, object, } from \"yup\";\n\nexport const loginSchema = object().shape({\n    email: string().email(\"Invalid email\").required(\"This field is required\"),\n    password: string().required(\"This field is required\"),\n});","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"loginForm_wrap__Q-v4F\",\"formWrapper\":\"loginForm_formWrapper__HIQjv\",\"contentWrapper\":\"loginForm_contentWrapper__fLAPJ\",\"switcher\":\"loginForm_switcher__Ejbfb\",\"inputContainer\":\"loginForm_inputContainer__WQcNS\",\"input\":\"loginForm_input__Z-Ho9\",\"button\":\"loginForm_button__eEDkD\",\"error\":\"loginForm_error__8N0LI\",\"loginButton\":\"loginForm_loginButton__0rQPt\",\"passwordContainer\":\"loginForm_passwordContainer__5X6Aj\",\"passwordInput\":\"loginForm_passwordInput__nYgiO\",\"showPasswordButtonWrap\":\"loginForm_showPasswordButtonWrap__+nPKQ\",\"showPasswordInput\":\"loginForm_showPasswordInput__RrXFi\",\"showPasswordButton\":\"loginForm_showPasswordButton__2JTHZ\"};","import { useState, useId } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { loginSchema } from \"../../schemas/loginSchemas\";\n\nimport styles from \"./loginForm.module.css\";\nimport { NavLink, useLocation } from \"react-router-dom\";\n\nconst LoginForm = ({ onSubmit }) => {\n  const { pathname } = useLocation();\n  const isLoginForm = pathname === \"/auth/login\";\n\n  const emailId = useId();\n  const passwordId = useId();\n\n  const { register, handleSubmit, formState: { errors }, trigger } = useForm({\n    resolver: yupResolver(loginSchema)\n  });\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const submitForm = async (data) => {\n    await trigger();\n    onSubmit(data);\n  };\n\n  return (\n    <div className={styles.wrap}>\n      <form onSubmit={handleSubmit(submitForm)} className={styles.formWrapper} noValidate>\n        <div className={styles.contentWrapper}>\n          <div className={styles.switcher}>\n            <NavLink to={\"/auth/register\"}>\n              <button className={styles.button} disabled={!isLoginForm}>Registration</button>\n            </NavLink>\n            <button className={styles.button} disabled={isLoginForm}>Log In</button>\n          </div>\n          <div className={styles.inputContainer}>\n            <input\n              placeholder=\"Enter your email\"\n              className={styles.input}\n              id={emailId}\n              {...register(\"email\")}\n              type=\"email\"\n              required\n            />\n            {errors.email && <p className={styles.error}>{errors.email.message}</p>}\n            <div className={styles.passwordContainer}>\n              <input\n                placeholder=\"Confirm your password\"\n                className={styles.passwordInput}\n                id={passwordId}\n                {...register(\"password\")}\n                type={showPassword ? \"text\" : \"password\"}\n                required\n              />\n              <div className={styles.showPasswordButtonWrap}>\n                <div \n                  className={styles.showPasswordButton}\n                  onClick={togglePasswordVisibility}\n                >\n                  <svg className={styles.logoIconOuter} width=\"18\" height=\"14\" viewBox=\"0 0 18 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M0.75 7C0.75 7 3.75 1 9 1C14.25 1 17.25 7 17.25 7C17.25 7 14.25 13 9 13C3.75 13 0.75 7 0.75 7Z\" stroke=\"white\" strokeWidth=\"1.3\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                    <svg className={styles.logoIconInner} width=\"6\" height=\"6\" viewBox=\"0 0 6 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M3 5.25C4.24264 5.25 5.25 4.24264 5.25 3C5.25 1.75736 4.24264 0.75 3 0.75C1.75736 0.75 0.75 1.75736 0.75 3C0.75 4.24264 1.75736 5.25 3 5.25Z\" stroke=\"white\" strokeWidth=\"1.3\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                    </svg>\n                  </svg>\n                </div>\n              </div>\n            </div>\n            {errors.password && <p className={styles.error}>{errors.password.message}</p>}\n            <button className={styles.loginButton} type=\"submit\">\n              Log In Now\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n\n","// extracted by mini-css-extract-plugin\nexport default {};","\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { register, login } from \"../../redux/auth/auth-operation\";\nimport { selectAuthError, selectAuthLoading } from \"../../redux/auth/auth-selectors\";\nimport RegisterForm from \"components/RegisterForm/RegisterForm\";\nimport LoginForm from \"components/LoginForm/LoginForm\";\nimport styles from \"./authPage.module.css\";\n\nconst AuthPage = () => {\n    const { id } = useParams();\n    const authLoading = useSelector(selectAuthLoading);\n    const authError = useSelector(selectAuthError);\n    const dispatch = useDispatch();\n\n    const handleRegister = data => {\n        dispatch(register(data));\n    }\n\n    const handleLogin = data => {\n        dispatch(login(data));\n    }\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.formContainer}>\n            {id === \"register\" ? (\n                <>\n                    {authLoading && <div>Loading...</div>}\n                    <RegisterForm onSubmit={handleRegister}/>\n                    {authError && <div className={styles.error}>{authError}</div>}\n                </>\n            ) : (\n                <>\n                    {authLoading && <div>Loading...</div>}\n                    <LoginForm onSubmit={handleLogin}/>\n                    {authError && <div className={styles.error}>{authError}</div>}\n                </>\n            )}\n        </div>\n      </div>\n    );\n};\n\nexport default AuthPage;\n\n"],"names":["registerSchema","object","shape","name","string","required","email","password","_ref","onSubmit","isRegisterForm","useLocation","pathname","emailId","useId","passwordId","nameId","_useForm","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_jsx","className","styles","children","noValidate","_jsxs","disabled","NavLink","to","_objectSpread","placeholder","id","message","type","onClick","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","loginSchema","isLoginForm","trigger","submitForm","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","stop","_x","apply","arguments","useParams","authLoading","useSelector","selectAuthLoading","authError","selectAuthError","dispatch","useDispatch","_Fragment","RegisterForm","LoginForm","login"],"sourceRoot":""}